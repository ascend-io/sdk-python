"""
Ascend Client module

The Client module of the Ascend SDK manages an API connection to
an Ascend environment.
"""

from ascend.model import Component, DataFeed, Dataflow, DataService
from ascend.lineage import LineageGraph
from ascend.session import Session
from urllib.error import HTTPError
from ascend.credentials import Credential

import ascend.cli.sh as sh
import configparser
import os


class Client(object):
    """
    Ascend SDK Client object.

    The Client object maintains a connection to an Ascend host on behalf of
    a Service Account defined in an Ascend Data Service. Authentication is
    via Access Keys, generated by Ascend and linked to the Service Account.

    Access Keys should be maintained in a secure location and not embedded
    in the client script.
    One method of managing keys is by using `configparser`.

    ```python
    from ascend.client import Client
    import configparser
    import os

    config = configparser.ConfigParser()
    config.read(os.path.expanduser("~/.ascend/credentials"))

    access_id = config.get("trial", "ascend_access_key_id")
    secret_key = config.get("trial", "ascend_secret_access_key")

    A = Client("trial.ascend.io", access_id, secret_key)
    ```

    # Parameters

    environment_hostname (str):
        Hostname on which the Ascend environment you wish connect to is deployed
    access_key (str):
        Access Key ID you wish to use to authenticate with Ascend
    secret_key (str):
        Secret Access Key to use to authenticate with Ascend
    verify (bool):
        Verify the server's SSL certificate
        (default is `True`)
    """

    def __init__(self, environment_hostname, access_key=None, secret_key=None, verify=True):
        if access_key is not None and secret_key is not None:
            self.session = Session(environment_hostname, access_key, secret_key, verify)

    @staticmethod
    def build(hostname: str) -> 'Client':
        if hostname.endswith(".ascend.io"):
            profile = hostname[:-10]
        else:
            raise ValueError(f"Invalid hostname {hostname}: "
                             f"must follow format <SOMETHING>.ascend.io")

        config = configparser.ConfigParser()

        verify_ssl = True
        access_key = sh.getenv("ASCEND_ACCESS_KEY_ID", required=False)
        secret_key = sh.getenv("ASCEND_SECRET_ACCESS_KEY", required=False)

        if not access_key and not secret_key:
            config.read(os.path.expanduser("~/.ascend/credentials"))
            try:
                access_key = config.get(profile, "ascend_access_key_id")
                secret_key = config.get(profile, "ascend_secret_access_key")
                verify_ssl = config.getboolean(profile, "verify_ssl", fallback=True)
            except Exception as e:
                raise ValueError('Unable to obtain credential from config') from e

        if not access_key or not secret_key:
            raise ValueError("Must have credentials to build client.")

        return Client(hostname, access_key=access_key, secret_key=secret_key, verify=verify_ssl)

    def get_session(self):
        """
        Get the Session object which the Client uses to make API requests.

        # Returns
        ascend.session.Session: the `Session` object
        """
        return self.session

    def list_roles(self):
        roles = self.session.get('org_roles', service='authz')['data']
        return roles

    def list_data_services(self, raw=False):
        """
        List the Data Services which this Client may access.

        # Returns
        List<ascend.model.DataService>:
            `DataService` objects, one for each accessible Data Service

        # Raises
        HTTPError: for errors returned by API
        """
        services = self.session.get("organizations")['data']
        if raw:
            return services
        return list(map(
            lambda s:
            DataService(s['id'], json_definition=s, session=self.session),
            services))

    def get_data_service(self, data_service_id: str) -> DataService:
        """
        Get a Data Service.

        # Parameters
        data_service_id (str): the ID of the Data Service

        # Returns
        ascend.model.DataService: the Data Service

        # Raises
        HTTPError: for errors returned by API
        """
        return DataService(data_service_id, session=self.session)

    def get_dataflow(self, data_service_id: str, dataflow_id: str) -> Dataflow:
        """
        Get a Dataflow within a Data Service.

        # Parameters
        data_service_id (str): the ID of the Data Service
        dataflow_id (str): the ID of the Dataflow

        # Returns
        ascend.model.Dataflow: the Dataflow

        # Raises
        HTTPError: for errors returned by API
        """
        return Dataflow(data_service_id, dataflow_id, session=self.session)

    def get_component(self, data_service_id: str, dataflow_id: str, component_id: str) -> Component:
        """
        Get a Component within a Dataflow.

        # Parameters
        data_service_id (str): the ID of the Data Service
        dataflow_id (str): the ID of the Dataflow
        component_id (str): the ID of the Component

        # Returns
        ascend.model.Component: the Component

        # Raises
        HTTPError: for errors returned by API
        """
        dataflow = Dataflow(data_service_id, dataflow_id, session=self.session)
        comps = dataflow.list_components()
        return [c for c in comps if c.component_id == component_id][0]

    def list_data_feeds(self, source_data_service_id=None, raw=False):
        """
        List the Data Feeds which are available to the Client's Service Account.

        # Parameters
        source_data_service_id (str):
            the ID of a Data Service, which if given will limit the
            Data Feeds to those produced by the Data Service.
            (default is `None`)

        # Returns
        List<ascend.model.DataFeed>: the Data Feeds
        """
        raw_resp = self.session.get("data-feeds")
        pub_list = raw_resp['data'].values()
        if source_data_service_id is not None:
            pub_list = list(filter(
                lambda pub:
                pub['fromOrgId'] == source_data_service_id,
                pub_list
            ))
        if raw:
            return pub_list

        return list(map(
            lambda pub:
            DataFeed(pub['fromOrgId'], pub['fromProjId'], pub['id'], pub, self.session),
            pub_list
        ))

    def list_accessible_credentials(self):
        raw_resp = self.session.get('credentials/accessible', service='authz')
        creds_list = raw_resp['data']

        return list(map(
            Credential.from_entry,
            creds_list
        ))

    def create_credential(self, org_id, role_id, cred: 'credentials.Credential'):
        resp = self.session.post(
            f'credentials/organizations/{org_id}/roles/{role_id}/vault',
            cred.create_payload(),
            service='authz')
        return Credential.from_entry(resp['data'])

    def lookup_credential_name(self, cred_id) -> str:
        resp = self.session.get(f'credentials/lookup?credentialId={cred_id}', service='authz')
        return resp['data']['name']

    def get_lineage(self):
        return LineageGraph(self.session)

    def get_data_feed(self, data_service_id, data_feed_id, raw=False):
        """
        Get a Data Feed.

        # Parameters
        data_service_id (str):
            the ID of the Data Service producing the Data Feed
        data_feed_id (str):
            the ID of the Data Feed. Must be unique within Data Service.

        # Returns
        ascend.model.DataFeed: the Data Feed
        """
        pub_list = self.list_data_feeds(data_service_id, raw=True)
        raw_matches = list(filter(
            lambda p:
            p['id'] == data_feed_id,
            pub_list
        ))

        if len(raw_matches) > 1:
            raise HTTPError(400, "Bad Request, Data Feed name not unique: " + data_feed_id)
        if len(raw_matches) < 1:
            raise HTTPError(403, "Forbidden, No access to Data Feed: {}.{}".format(data_service_id, data_feed_id))

        pub = raw_matches[0]
        if raw:
            return pub

        return DataFeed(data_service_id, pub['fromProjId'], data_feed_id, pub, self.session)
